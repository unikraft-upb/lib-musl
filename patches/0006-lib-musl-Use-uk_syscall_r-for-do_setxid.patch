From db5c67091a7a9817668aaa61a782eeb5ee83847b Mon Sep 17 00:00:00 2001
From: Dragos Iulian Argint <dragosargint21@gmail.com>
Date: Sat, 7 May 2022 11:10:07 +0300
Subject: [PATCH] lib-musl: Use `uk_syscall_r()` for `do_setxid()`

If we have a system call number known only at runtime then
we will use the `uk_syscall_r()` macro from syscall shim. This
makes a function call (not a binary system call), but knows
how to demultiplex depending on the number given as a parameter.

Signed-off-by: Dragos Iulian Argint <dragosargint21@gmail.com>
---
 src/unistd/setxid.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/unistd/setxid.c b/src/unistd/setxid.c
index 0239f8a..d994de9 100644
--- a/src/unistd/setxid.c
+++ b/src/unistd/setxid.c
@@ -3,6 +3,7 @@
 #include "syscall.h"
 #include "libc.h"
 #include "pthread_impl.h"
+#include <uk/syscall.h>
 
 struct ctx {
 	int id, eid, sid;
@@ -13,7 +14,7 @@ static void do_setxid(void *p)
 {
 	struct ctx *c = p;
 	if (c->err>0) return;
-	int ret = -__syscall(c->nr, c->id, c->eid, c->sid);
+	int ret = -uk_syscall_r(c->nr, c->id, c->eid, c->sid);
 	if (ret && !c->err) {
 		/* If one thread fails to set ids after another has already
 		 * succeeded, forcibly killing the process is the only safe
-- 
2.17.1

